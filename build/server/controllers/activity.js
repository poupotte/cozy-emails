// Generated by CoffeeScript 1.10.0
var BadRequest, Contact, ContactActivity, NotFound, async, log, ref;

Contact = require('../models/contact');

async = require('async');

log = require('../utils/logging')({
  prefix: 'controllers:activity'
});

ref = require('../utils/errors'), BadRequest = ref.BadRequest, NotFound = ref.NotFound;

ContactActivity = {
  search: function(data, callback) {
    var params, request;
    if (data == null) {
      data = {};
    }
    if (data.query != null) {
      request = 'mailByName';
      params = {
        startkey: data.query,
        endkey: data.query + "\uFFFF"
      };
    } else {
      request = 'all';
      params = {};
    }
    return Contact.requestWithPictures(request, params, callback);
  },
  create: function(data, callback) {
    var ref1;
    if (data == null) {
      data = {};
    }
    if (((ref1 = data.contact) != null ? ref1.address : void 0) != null) {
      return Contact.createNoDuplicate(data.contact, callback);
    } else {
      return callback(new BadRequest('BAD FORMAT'));
    }
  },
  "delete": function(data, callback) {
    return Contact.find(data.id, function(err, contact) {
      if (err) {
        return callback(err);
      }
      if (!contact) {
        return callback(new NotFound("CONTACT " + data.id));
      }
      return contact.destroy(callback);
    });
  }
};

module.exports.create = function(req, res, next) {
  var activity, msg, ref1, stack;
  if (req == null) {
    req = {};
  }
  if (res == null) {
    res = {};
  }
  activity = req.body;
  if (activity == null) {
    activity = {
      data: {
        type: 'error'
      }
    };
  }
  switch (activity.data.type) {
    case 'contact':
      if (ContactActivity[activity.name] != null) {
        return ContactActivity[activity.name](activity.data, function(err, result) {
          if (err != null) {
            return res.status(400).send({
              name: err.message,
              error: true
            });
          } else {
            return res.send({
              result: result
            });
          }
        });
      } else {
        return res.status(400).send({
          name: "Unknown activity name",
          error: true
        });
      }
      break;
    case 'error':
      if ((stack = (ref1 = activity.data.error) != null ? ref1.stack : void 0)) {
        log.error(activity.data);
        log.error(stack);
      } else {
        msg = activity.data.error.msg;
        if (msg == null) {
          msg = "Missing req argument";
        }
        log.error(msg);
      }
      return res.send('ok');
    case 'warn':
      log.warn(activity.data.msg);
      return res.send('ok');
    case 'info':
    case 'log':
      log.info(activity.data.msg);
      return res.send('ok');
    case 'debug':
      log.debug(activity.data.msg);
      return res.send('ok');
    default:
      return res.status(400).send({
        name: "Unknown activity data type",
        error: true
      });
  }
};
