// Generated by CoffeeScript 1.8.0
var Client, HttpError, Message, async, dataSystem, jsonpatch, password, user, _ref;

async = require('async');

Message = require('../models/message');

HttpError = require('../utils/errors').HttpError;

Client = require('request-json').JsonClient;

jsonpatch = require('fast-json-patch');

dataSystem = new Client('http://localhost:9101/');

if ((_ref = process.env.NODE_ENV) === 'production' || _ref === 'test') {
  user = process.env.NAME;
  password = process.env.TOKEN;
  dataSystem.setBasicAuth(user, password);
}

module.exports.listByMailboxId = function(req, res, next) {
  var options;
  options = {
    numPage: req.params.numPage - 1,
    numByPage: req.params.numByPage
  };
  return Message.getByMailboxAndDate(req.params.mailboxID, options).then(function(messages) {
    return res.send(200, messages);
  })["catch"](next);
};

module.exports.countByMailboxId = function(req, res, next) {
  return Message.countByMailbox(req.params.mailboxID).then(function(count) {
    return res.send(200, count);
  })["catch"](next);
};

module.exports.fetch = function(req, res, next) {
  return Message.findPromised(req.params.messageID).then(function(message) {
    if (message) {
      return req.message = message;
    } else {
      throw new HttpError(404, 'Not Found');
    }
  }).nodeify(next);
};

module.exports.details = function(req, res, next) {
  return res.send(200, req.message);
};

module.exports.patch = function(req, res, next) {
  jsonpatch.apply(req.message, req.body);
  return res.send(200, req.message);
};

module.exports.send = function(req, res, next) {
  console.log("Server: ", typeof req.body);
  return dataSystem.post('mail/', req.body, function(dsErr, dsRes, dsBody) {
    if (dsErr) {
      return res.send(500, dsBody);
    } else {
      return res.send(200, dsBody);
    }
  });
};

module.exports.search = function(req, res, next) {
  var numPageCheat;
  if (req.params.query == null) {
    return next(new HttpError(400, '`query` body field is mandatory'));
  } else {
    numPageCheat = parseInt(req.params.numPage) * parseInt(req.params.numByPage) + 1;
    return Message.searchPromised({
      query: req.params.query,
      numPage: req.params.numPage,
      numByPage: numPageCheat
    }).then(function(messages) {
      return res.send(messages);
    })["catch"](next);
  }
};

module.exports.index = function(req, res, next) {
  return Message.request('all', {}, function(err, messages) {
    if (err != null) {
      return next(err);
    } else {
      return async.each(messages, function(message, callback) {
        return message.index(['subject', 'text'], callback);
      }, function(err) {
        if (err != null) {
          return next(err);
        } else {
          return res.send(200, 'Indexation OK');
        }
      });
    }
  });
};

module.exports.del = function(req, res, next) {
  return res.send(200, "");
};
