// Generated by CoffeeScript 1.8.0
var IGNORE_ATTRIBUTES, Mailbox, Promise, americano, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

americano = require('americano-cozy');

Promise = require('bluebird');

_ = require('lodash');

module.exports = Mailbox = americano.getModel('Mailbox', {
  accountID: String,
  label: String,
  path: String,
  tree: function(x) {
    return x;
  },
  uidvalidity: String,
  persistentUIDs: Boolean,
  attribs: function(x) {
    return x;
  },
  children: function(x) {
    return x;
  }
});

Mailbox.getBoxes = function(accountID) {
  return Mailbox.rawRequestPromised('treeMap', {
    startkey: [accountID],
    endkey: [accountID, {}],
    include_docs: true
  }).map(function(row) {
    return new Mailbox(row.doc);
  }).filter(function(box) {
    return __indexOf.call(box.attribs, '\\Noselect') < 0;
  });
};

Mailbox.getTree = function(accountID, filter) {
  var DELIMITER, byPath, out, transform;
  out = [];
  byPath = {};
  DELIMITER = '/|/';
  transform = function(boxData) {
    var box;
    box = new Mailbox(boxData);
    box.children = [];
    if (filter) {
      return filter(box);
    } else {
      return box;
    }
  };
  return Mailbox.rawRequestPromised('treeMap', {
    startkey: [accountID],
    endkey: [accountID, {}],
    include_docs: true
  }).each(function(row) {
    var box, parentPath, path;
    path = row.key.slice(1);
    box = byPath[path.join(DELIMITER)] = transform(row.doc);
    if (path.length === 1) {
      return out.push(box);
    } else {
      parentPath = path.slice(0, -1).join(DELIMITER);
      return byPath[parentPath].children.push(box);
    }
  })["return"](out);
};

Mailbox.getClientTree = function(accountID) {
  var filter;
  filter = function(box) {
    return _.pick(box, 'id', 'label', 'children');
  };
  return Mailbox.getTree(accountID, filter);
};

IGNORE_ATTRIBUTES = ['\\HasNoChildren', '\\HasChildren'];

Mailbox.createBoxesFromImapTree = function(accountID, tree) {
  var boxes, handleLevel;
  boxes = [];
  (handleLevel = function(children, pathStr, pathArr) {
    var child, name, subPathArr, subPathStr, _results;
    _results = [];
    for (name in children) {
      child = children[name];
      subPathStr = pathStr + name + child.delimiter;
      subPathArr = pathArr.concat(name);
      handleLevel(child.children, subPathStr, subPathArr);
      _results.push(boxes.push({
        accountID: accountID,
        label: name,
        path: pathStr + name,
        tree: subPathArr,
        attribs: _.difference(child.attribs, IGNORE_ATTRIBUTES)
      }));
    }
    return _results;
  })(tree, '', []);
  return Promise.serie(boxes, function(box) {
    return Mailbox.createPromised(box);
  });
};

require('bluebird').promisifyAll(Mailbox, {
  suffix: 'Promised'
});

require('bluebird').promisifyAll(Mailbox.prototype, {
  suffix: 'Promised'
});
