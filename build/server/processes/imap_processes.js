// Generated by CoffeeScript 1.8.0
var ImapProcess, ImapScheduler, Mailbox, Message, Promise, _;

ImapScheduler = require('./imap_scheduler');

Promise = require('bluebird');

Message = require('../models/message');

Mailbox = require('../models/mailbox');

_ = require('lodash');

module.exports = ImapProcess = {};

ImapProcess.checkConnection = function(account) {
  return ImapScheduler.instanceFor(account).doASAP(function(imap) {
    return Promise.resolve('ok');
  });
};

ImapProcess.fetchBoxesTree = function(account) {
  return ImapScheduler.instanceFor(account).doASAP(function(imap) {
    console.log("FETCH BOX TREE");
    return imap.getBoxes();
  });
};

ImapProcess.fetchAccount = function(account) {
  return Mailbox.getBoxes(account.id).then(function(boxes) {
    return Promise.serie(boxes, function(box) {
      return ImapProcess.fetchMailbox(account, box)["catch"](function(err) {
        return console.log("FAILED TO FETCH BOX", box.path, err.stack);
      });
    });
  });
};

ImapProcess.fetchMailbox = function(account, box) {
  return ImapScheduler.instanceFor(account).doLater(function(imap) {
    return imap.openBox(box.path).then(function(imapbox) {
      if (!imapbox.persistentUIDs) {
        throw new Error('UNPERSISTENT UID NOT SUPPORTED');
      }
      if (box.uidvalidity && imapbox.uidvalidity !== box.uidvalidity) {
        throw new Error('UID VALIDITY HAS CHANGED');
      }
    }).then(function() {
      return Promise.all([imap.search([['ALL']]), Message.getUIDs(box.id)]);
    });
  }).spread(function(imapIds, cozyIds) {
    var toDelete, toFetch;
    toFetch = _.difference(imapIds, cozyIds);
    toDelete = _.difference(cozyIds, imapIds);
    console.log('FETCHING', box.path);
    console.log('   in imap', imapIds.length);
    console.log('   in cozy', cozyIds.length);
    console.log('   to fetch', toFetch.length);
    console.log('   to del', toDelete.length);
    return Promise.map(toFetch.reverse(), function(id) {
      return ImapProcess.fetchOneMail(account, box, id)["catch"](function(err) {
        return console.log("FAILED TO FETCH MAIL", box.path, id, err.stack);
      });
    });
  });
};

ImapProcess.fetchOneMail = function(account, box, uid) {
  var scheduler;
  scheduler = ImapScheduler.instanceFor(account);
  return scheduler.doLater(function(imap) {
    var log, mail;
    log = "MAIL " + box.path + "#" + uid + " ";
    mail = null;
    return imap.openBox(box.path).then(function() {
      return imap.fetchOneMail(uid);
    }).then(function(fetched) {
      mail = fetched;
      return Message.byMessageId(account.id, mail.headers['message-id']);
    }).then(function(existing) {
      if (existing) {
        return existing.addToMailbox(box, uid).tap(function() {
          return console.log(log + "already in db");
        });
      } else {
        return Message.createFromImapMessage(mail, box, uid).tap(function() {
          return console.log(log + "created");
        });
      }
    });
  });
};
